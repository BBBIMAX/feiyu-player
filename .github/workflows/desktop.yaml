name: Build and Release
on:
  workflow_dispatch:
    inputs:
      release_message:
        description: "版本更新说明"
        type: string
        required: true
        default: |
          发现新版本✨ 如果更新失败，请到官网下载最新版本：https://feiyu-player.xbox.work

jobs:
  build-for-macos:
    name: macOS
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: macos
            os: macos-latest
            arch: aarch64
            target: aarch64-apple-darwin
            args:
          - build: macos
            os: macos-latest
            arch: x86_64
            target: x86_64-apple-darwin
          - build: macos
            os: macos-latest
            arch: universal
            target: universal-apple-darwin

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: 初始化 PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: 初始化 Node 环境和缓存
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - name: 初始化 Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.arch == 'universal' && 'aarch64-apple-darwin,x86_64-apple-darwin' || matrix.arch }}
      - name: 初始化 Rust 缓存
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./packages/feiyu-desktop/src-tauri -> target"
      - name: 构建飞鱼 APP
        id: app
        run: |
          cd packages/feiyu-desktop
          pnpm i && pnpm build --target ${{ matrix.target }}
          echo "version=$(node -p "require('./src-tauri/tauri.conf.json').version")" >> $GITHUB_OUTPUT
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - name: 重命名安装包
        run: |
          cd packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/dmg
          app_name = feiyu_${{ steps.app.outputs.version }}_${{ matrix.build }}_${{ matrix.arch }}.dmg
          for f in *.dmg; do mv "$f" $app_name; done
      - name: 上传安装包
        uses: actions/upload-artifact@v4
        with:
          path: |
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
          if-no-files-found: error
      - name: 发布版本
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg

  build-for-windows:
    name: Windows
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: windows
            os: windows-latest
            arch: x86_64
            target: x86_64-pc-windows-msvc
          - build: windows
            os: windows-latest
            arch: aarch64
            target: aarch64-pc-windows-msvc
          - build: windows
            os: windows-latest
            arch: i686
            target: i686-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: 初始化 PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: 初始化 Node 环境和缓存
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - name: 初始化 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
      - name: 初始化 Rust 构建环境
        run: |
          rustup target add ${{ matrix.target }}
      - name: 构建飞鱼 APP
        id: app
        run: |
          cd packages/feiyu-desktop
          pnpm i && pnpm build --target ${{ matrix.target }} ${{ env.TAURI_ARGS }}
          echo "version=$(node -p "require('./src-tauri/tauri.conf.json').version")" >> $GITHUB_OUTPUT
        env:
          TAURI_ARGS: ${{ matrix.arch == 'aarch64' && '--bundles nsis' || '' }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - name: 重命名安装包 (.msi)
        if: matrix.arch != 'aarch64'
        run: |
          cd packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/msi
          $app_name = "feiyu_${{ steps.app.outputs.version }}_${{ matrix.build }}_${{ matrix.arch }}.msi"
          Get-ChildItem -Path ./ -Filter *.msi | Rename-Item -NewName $app_name
        shell: pwsh
      - name: 重命名安装包 (.exe)
        run: |
          cd packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/nsis
          $app_name = "feiyu_${{ steps.app.outputs.version }}_${{ matrix.build }}_${{ matrix.arch }}.exe"
          Get-ChildItem -Path ./ -Filter *.exe | Rename-Item -NewName $app_name
        shell: pwsh
      - name: 上传安装包
        uses: actions/upload-artifact@v4
        with:
          path: |
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
          if-no-files-found: error
      - name: 发布版本
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/msi/*.msi
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe

  build-for-linux:
    name: Linux
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            arch: x86_64
            target: x86_64-unknown-linux-gnu
          - build: linux
            os: ubuntu-latest
            arch: aarch64
            target: aarch64-unknown-linux-gnu
          - build: linux
            os: ubuntu-latest
            arch: i686
            target: i686-unknown-linux-gnu
          - build: linux
            os: ubuntu-latest
            arch: armv7
            target: armv7-unknown-linux-gnueabihf

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: 初始化 PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: 初始化 Node 环境和缓存
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "pnpm"
          cache-dependency-path: "**/pnpm-lock.yaml"
      - name: 初始化 Rust 工具链
        uses: dtolnay/rust-toolchain@stable
      - name: 初始化 Rust 构建环境
        run: |
          rustup target add ${{ matrix.target }}
      - name: 初始化 Rust 缓存
        if: matrix.build != 'windows'
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./packages/feiyu-desktop/src-tauri -> target"
      - name: 初始化 Linux 构建环境
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libsoup-3.0-dev libjavascriptcoregtk-4.1-dev
      - name: 构建飞鱼 APP
        id: app
        run: |
          cd packages/feiyu-desktop
          pnpm i && pnpm build --target ${{ matrix.target }}
          echo "version=$(node -p "require('./src-tauri/tauri.conf.json').version")" >> $GITHUB_OUTPUT
        env:
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
      - name: 重命名安装包
        run: |
          # .deb
          cd packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/deb
          app_name=feiyu_${{ steps.app.outputs.version }}_${{ matrix.build }}_${{ matrix.arch }}.deb
          for f in *.deb; do mv "$f" "$app_name"; done
          # .rpm
          cd packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/rpm
          app_name=feiyu_${{ steps.app.outputs.version }}_${{ matrix.build }}_${{ matrix.arch }}.rpm
          for f in *.rpm; do mv "$f" "$app_name"; done
          # .AppImage
          cd packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/appimage
          app_name=feiyu_${{ steps.app.outputs.version }}_${{ matrix.build }}_${{ matrix.arch }}.AppImage
          for f in *.AppImage; do mv "$f" "$app_name"; done
      - name: 上传安装包
        uses: actions/upload-artifact@v4
        with:
          path: |
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
          if-no-files-found: error
      - name: 发布版本
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/deb/*.deb
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/rpm/*.rpm
            packages/feiyu-desktop/src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage

  release:
    name: Release
    needs: [build-for-macos, build-for-windows, build-for-linux]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: 获取应用版本号
        id: app
        run: |
          echo "version=$(node -p "require('./packages/feiyu-desktop/src-tauri/tauri.conf.json').version")" >> $GITHUB_OUTPUT
      - name: 创建发布版本
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          # body: ${{ inputs.release_message }}
          name: Release v${{ steps.app.outputs.version }}
          tag_name: v${{ steps.app.outputs.version }}
          draft: true
          prerelease: false
